from scipy.fftpack import dct
import my_library
import time
import numpy as np

# N = 2
m2 = [[231, 32],
      [247, 40]]

# N = 4
m4 = [[231, 32, 233, 161],
      [247, 40, 248, 245],
      [234, 202, 245, 167],
      [193, 190, 100, 167]]

# N = 8
m8 = [[231, 32, 233, 161, 24, 71, 140, 245],
      [247, 40, 248, 245, 124, 204, 36, 107],
      [234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228]]

# N = 16
m16 = [[231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228]]

# N = 32
m32 = [[231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245, 231, 32, 233, 161, 24, 71, 140, 245],
      [234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173, 234, 202, 245, 167, 9, 217, 239, 173],
      [193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70, 193, 190, 100, 167, 43, 180, 8, 70],
      [11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112, 11, 24, 210, 177, 81, 243, 8, 112],
      [97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181, 97, 195, 203, 47, 125, 114, 165, 181],
      [193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245, 193, 70, 174, 167, 41, 30, 127, 245],
      [87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228, 87, 149, 57, 192, 65, 129, 178, 228]]

# N = 64
m64 = np.random.uniform(low = 0.0, high = 255.0, size=(64, 64))
m64 = m64.astype(int)
m64 = m64.tolist()

# N = 100
m100 = np.random.uniform(low = 0.0, high = 255.0, size=(100, 100))
m100 = m100.astype(int)
m100 = m100.tolist()

# N = 8
m8_2 = [[-76, -73, -67, -62, -58, -67, -64, -55],
      [-65, -69, -73, -38, -19, -43, -59, -56],
      [-66, -69, -60, -15, 16, -24, -62, -55],
      [-65, -70, -57, -6, 26, -22, -58, -59],
      [-61, -67, -60, -24, -2, -40, -60, -58],
      [-49, -63, -68, -58, -51, -60, -70, -53],
      [-43, -57, -64, -69, -73, -67, -63, -45],
      [-41, -49, -59, -60, -63, -52, -50, -34]]

a8 = [[231., 32., 233., 161., 24., 71., 140., 245.,]]
####################################################################


####################################################################
#i due seguenti test sono effettuati sulla matrice fornita dai prof. con la dtc già implementata

""" print()

print("dct già implementata, res1_1:\n")
#1.1) calcolo dct per una matrice, prima per righe, poi per colonne
res1_1 = dct(m8, 2, norm='ortho', axis=-1)
res1_1 = dct(res1_1, 2, norm='ortho', axis=0)
print(res1_1)

print()

print("dct già implementata, res1_2:\n")
#1.2) calcolo dct su array
res1_2 = dct(a8, norm='ortho')
print(res1_2) """

####################################################################


####################################################################
#i due seguenti test sono effettuati sulla matrice fornita dai prof. con la dtc implementata in casa

""" print()

print("dct fatta in casa, res2_1:\n")
#1.1) calcolo dct per una matrice
res2_1 = my_library.dct2Transform(m8)
print(res2_1)

print()

print("dct fatta in casa, res2_2:\n")
#1.2) dct su array
res2_2 = my_library.dct2Transform(a8)
print(res2_2) """

####################################################################


####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 2

print("\nmatrice m2: ")
# nostra dct
t0 = time.time()
test_1 = my_library.dct2Transform(m2)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_2 = dct(m2, 2, norm='ortho', axis=-1)
test_2 = dct(test_2, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################


####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 4

print("\nmatrice m4: ")
# nostra dct
t0 = time.time()
test_3 = my_library.dct2Transform(m4)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_4 = dct(m4, 2, norm='ortho', axis=-1)
test_4 = dct(test_4, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################


####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 8

print("\nmatrice m8: ")
# nostra dct
t0 = time.time()
test_5 = my_library.dct2Transform(m8)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_6 = dct(m8, 2, norm='ortho', axis=-1)
test_6 = dct(test_6, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################

####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 16

print("\nmatrice m16: ")
# nostra dct
t0 = time.time()
test_7 = my_library.dct2Transform(m16)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_8 = dct(m16, 2, norm='ortho', axis=-1)
test_8 = dct(test_8, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################

####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 32

print("\nmatrice m32: ")
# nostra dct
t0 = time.time()
test_9 = my_library.dct2Transform(m32)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_10 = dct(m32, 2, norm='ortho', axis=-1)
test_10 = dct(test_10, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################

####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 64

print("\nmatrice m64: ")
# nostra dct
t0 = time.time()
test_11 = my_library.dct2Transform(m64)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_12 = dct(m64, 2, norm='ortho', axis=-1)
test_12 = dct(test_10, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################

####################################################################
# paragone tempi tra nostra dct e dct già implementata con N = 100

print("\nmatrice m100: ")
# nostra dct
t0 = time.time()
test_12 = my_library.dct2Transform(m100)
t1 = time.time()
print("\nnostra dct: " + str((t1 - t0)))

# dct già implementata
t0 = time.time()
test_13 = dct(m100, 2, norm='ortho', axis=-1)
test_13 = dct(test_13, 2, norm='ortho', axis=0)
t1 = time.time()
print("\ndct libreria: " + str((t1 - t0)))
####################################################################